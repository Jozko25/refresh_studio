import express from 'express';
import CallFlowService from '../services/callFlowService.js';
import SlotService from '../services/slotService.js';
import WidgetFlowService from '../services/widgetFlowService.js';

const router = express.Router();

/**
 * POST /api/elevenlabs
 * Unified endpoint for all ElevenLabs tool calls
 * Handles dynamic routing based on tool_name parameter
 */
router.post('/', async (req, res) => {
    try {
        const { tool_name, search_term, service_id, worker_id = -1, date, time } = req.body;

        if (!tool_name) {
            return res.json({
                success: false,
                response: "Nerozumiem po≈æiadavke. Sk√∫ste to znovu."
            });
        }

        console.log(`üîß ElevenLabs tool call: ${tool_name}`, req.body);

        let result;
        let response;

        switch (tool_name) {
            case 'get_services_overview':
                result = await CallFlowService.getServiceOverview();
                if (result.success && result.overview) {
                    response = "Pon√∫kame tieto hlavn√© slu≈æby:\n\n";
                    result.overview.forEach((service, index) => {
                        response += `${index + 1}. ${service.name} - ${service.description}\n`;
                    });
                    response += "\nChcete poƒçu≈• o ƒèal≈°√≠ch slu≈æb√°ch alebo v√°s zauj√≠ma niektor√° z t√Ωchto?";
                } else {
                    response = "Moment√°lne nem√¥≈æem naƒç√≠ta≈• zoznam slu≈æieb. Sk√∫ste to pros√≠m znovu.";
                }
                break;

            case 'search_service':
                if (!search_term) {
                    return res.json({
                        success: false,
                        response: "Nerozumiem, ak√∫ slu≈æbu hƒæad√°te. M√¥≈æete by≈• konkr√©tnej≈°√≠?"
                    });
                }
                
                result = await CallFlowService.searchServices(search_term);
                if (result.success && result.found > 0) {
                    response = `Na≈°la som ${result.found} ${result.found === 1 ? 'slu≈æbu' : 'slu≈æieb'} pre "${search_term}":\n\n`;
                    result.services.slice(0, 3).forEach((service, index) => {
                        response += `${index + 1}. ${service.name}\n`;
                        response += `   Cena: ${service.price}, Trvanie: ${service.duration}\n`;
                        response += `   ID slu≈æby: ${service.serviceId}\n\n`;
                    });
                    response += "Ktor√° slu≈æba v√°s zauj√≠ma? M√¥≈æem v√°m n√°js≈• voƒæn√© term√≠ny.";
                } else {
                    response = `ƒΩutujem, nena≈°la som slu≈æbu "${search_term}". Sk√∫ste in√Ω n√°zov alebo sa sp√Ωtajte na na≈°e hlavn√© slu≈æby.`;
                }
                break;

            case 'find_soonest_slot':
                if (!service_id) {
                    return res.json({
                        success: false,
                        response: "Potrebujem vedie≈• ID slu≈æby. Najsk√¥r vyhƒæadajte slu≈æbu."
                    });
                }

                result = await SlotService.findSoonestSlot(service_id, worker_id);
                if (result.success && result.found) {
                    if (result.daysFromNow === 0) {
                        response = `Najr√Ωchlej≈°√≠ dostupn√Ω term√≠n je dnes o ${result.time}.`;
                    } else if (result.daysFromNow === 1) {
                        response = `Najr√Ωchlej≈°√≠ dostupn√Ω term√≠n je zajtra (${result.date}) o ${result.time}.`;
                    } else {
                        response = `Najr√Ωchlej≈°√≠ dostupn√Ω term√≠n je ${result.date} o ${result.time} (o ${result.daysFromNow} dn√≠).`;
                    }
                    
                    response += ` Celkovo je na tento de≈à dostupn√Ωch ${result.totalSlots} term√≠nov.`;
                    
                    if (result.alternativeSlots.length > 0) {
                        response += ` ƒéal≈°ie mo≈æn√© ƒçasy: ${result.alternativeSlots.join(', ')}.`;
                    }
                    
                    response += "\n\nChcete si rezervova≈• tento term√≠n alebo potrebujete in√Ω d√°tum?";
                } else {
                    response = "ƒΩutujem, v najbli≈æ≈°√≠ch d≈àoch nie s√∫ dostupn√© ≈æiadne voƒæn√© term√≠ny. Sk√∫ste nesk√¥r alebo sa sp√Ωtajte na konkr√©tny d√°tum.";
                }
                break;

            case 'check_specific_slot':
                if (!service_id || !date || !time) {
                    return res.json({
                        success: false,
                        response: "Potrebujem vedie≈• ID slu≈æby, d√°tum a ƒças."
                    });
                }

                result = await SlotService.checkSlot(service_id, worker_id, date, time);
                if (result.success) {
                    if (result.available) {
                        response = `V√Ωborn√©! Term√≠n ${date} o ${time} je dostupn√Ω.`;
                        response += "\n\nChcete si tento term√≠n rezervova≈•?";
                    } else {
                        response = `ƒΩutujem, term√≠n ${date} o ${time} nie je dostupn√Ω.`;
                        
                        if (result.closestTimes && result.closestTimes.length > 0) {
                            response += ` Na tento de≈à s√∫ dostupn√© tieto ƒçasy: ${result.closestTimes.join(', ')}.`;
                            response += "\n\nKtor√Ω z t√Ωchto ƒçasov by v√°m vyhovoval?";
                        } else if (result.totalSlots > 0) {
                            response += ` Na tento de≈à je dostupn√Ωch ${result.totalSlots} in√Ωch term√≠nov.`;
                            response += "\n\nChcete poƒçu≈• dostupn√© ƒçasy?";
                        } else {
                            response += " Na tento de≈à nie s√∫ dostupn√© ≈æiadne term√≠ny.";
                            response += "\n\nSk√∫ste in√Ω d√°tum alebo sa sp√Ωtajte na najr√Ωchlej≈°√≠ dostupn√Ω term√≠n.";
                        }
                    }
                } else {
                    response = "Nastala chyba pri kontrole term√≠nu. Sk√∫ste to pros√≠m znovu.";
                }
                break;

            case 'get_booking_info':
                if (!service_id) {
                    return res.json({
                        success: false,
                        response: "Potrebujem vedie≈• ID slu≈æby."
                    });
                }

                result = await CallFlowService.getBookingInfo(service_id, worker_id);
                if (result.success) {
                    if (result.soonest && result.soonest.found) {
                        response = `${result.message}\n\n`;
                        response += `Dostupn√≠ pracovn√≠ci: ${result.workers.map(w => w.name).join(', ')}.\n`;
                        
                        if (result.today && result.today.totalSlots > 0) {
                            response += `Dnes je dostupn√Ωch ${result.today.totalSlots} term√≠nov`;
                            if (result.today.firstTime) {
                                response += ` (od ${result.today.firstTime})`;
                            }
                            response += ".\n";
                        }
                        
                        response += "\nChcete si rezervova≈• najbli≈æ≈°√≠ term√≠n alebo potrebujete konkr√©tny d√°tum?";
                    } else {
                        response = "V najbli≈æ≈°√≠ch d≈àoch nie s√∫ dostupn√© ≈æiadne term√≠ny. Sk√∫ste nesk√¥r alebo sa sp√Ωtajte na konkr√©tny d√°tum.";
                    }
                } else {
                    response = "Nastala chyba pri naƒç√≠tavan√≠ inform√°ci√≠ o rezerv√°cii.";
                }
                break;

            case 'quick_service_lookup':
                if (!search_term) {
                    return res.json({
                        success: false,
                        response: "Nerozumiem, ak√∫ slu≈æbu hƒæad√°te."
                    });
                }

                const lookupDate = date || "04.09.2025";
                result = await WidgetFlowService.quickServiceLookup(search_term, lookupDate);
                
                if (result.success) {
                    response = `Na≈°la som slu≈æbu: ${result.service.name}\n`;
                    response += `Cena: ${result.service.price}, Trvanie: ${result.service.duration}\n`;
                    response += `ID slu≈æby: ${result.service.id}\n`;
                    response += `Pracovn√≠k: ${result.worker.name}\n\n`;
                    
                    if (result.availability.totalSlots > 0) {
                        response += `Na ${lookupDate} je dostupn√Ωch ${result.availability.totalSlots} term√≠nov:\n`;
                        
                        if (result.availability.morningTimes.length > 0) {
                            response += `Dopoludnia: ${result.availability.morningTimes.slice(0, 4).join(', ')}`;
                            if (result.availability.morningTimes.length > 4) response += "...";
                            response += "\n";
                        }
                        
                        if (result.availability.afternoonTimes.length > 0) {
                            response += `Popoludn√≠: ${result.availability.afternoonTimes.slice(0, 4).join(', ')}`;
                            if (result.availability.afternoonTimes.length > 4) response += "...";
                            response += "\n";
                        }
                        
                        response += "\nKtor√Ω ƒças by v√°m vyhovoval?";
                    } else {
                        response += `Na ${lookupDate} nie s√∫ dostupn√© ≈æiadne term√≠ny.\n`;
                        response += "Chcete sk√∫si≈• in√Ω d√°tum alebo najr√Ωchlej≈°√≠ mo≈æn√Ω term√≠n?";
                    }
                } else {
                    response = `ƒΩutujem, nena≈°la som slu≈æbu "${search_term}". Sk√∫ste in√Ω n√°zov.`;
                }
                break;

            case 'get_opening_hours':
                response = `Na≈°e otv√°racie hodiny s√∫:
Pondelok a≈æ piatok: 9:00 - 12:00 a 13:00 - 17:00
Sobota a nedeƒæa: Zatvoren√©

Nach√°dzame sa na adrese:
Lazaretsk√° 13, Bratislava

Pre rezerv√°cie m√¥≈æete vola≈• alebo nav≈°t√≠vi≈• na≈°u webstr√°nku.`;
                result = {
                    success: true,
                    data: {
                        weekdays: "9:00-12:00, 13:00-17:00",
                        weekend: "Zatvoren√©",
                        address: "Lazaretsk√° 13, Bratislava"
                    }
                };
                break;

            default:
                return res.json({
                    success: false,
                    response: `Nezn√°my n√°stroj: ${tool_name}. Dostupn√© n√°stroje: get_services_overview, search_service, find_soonest_slot, check_specific_slot, get_booking_info, quick_service_lookup, get_opening_hours`
                });
        }

        res.json({
            success: result?.success !== false,
            response: response,
            data: result
        });

    } catch (error) {
        console.error('ElevenLabs unified endpoint error:', error);
        res.json({
            success: false,
            response: "Nastala chyba. Sk√∫ste to pros√≠m znovu.",
            error: error.message
        });
    }
});

export default router;