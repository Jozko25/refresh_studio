#!/usr/bin/env node

/**
 * Enhanced Booking System Validation Demo
 * Demonstrates the improved booking logic based on medical center patterns
 */

console.log('üß™ Enhanced Booking Validation Logic Demo');
console.log('==========================================');
console.log('');

// Simulated validation functions based on our enhanced configurations
class BookingValidation {
  
  validatePhoneNumber(phone) {
    const phonePattern = /^\+421[0-9]{9}$/;
    return {
      valid: phonePattern.test(phone),
      message: phonePattern.test(phone) 
        ? 'Telef√≥nne ƒç√≠slo je platn√©' 
        : 'Pros√≠m, zadajte platn√© slovensk√© telef√≥nne ƒç√≠slo (+421XXXXXXXXX)'
    };
  }
  
  validateCustomerData(customer) {
    const errors = [];
    const requiredFields = ['firstName', 'lastName', 'phone'];
    
    // Check required fields
    requiredFields.forEach(field => {
      if (!customer[field] || customer[field].trim() === '') {
        errors.push(`Ch√Ωba povinn√© pole: ${field}`);
      }
    });
    
    // Validate phone if provided
    if (customer.phone) {
      const phoneCheck = this.validatePhoneNumber(customer.phone);
      if (!phoneCheck.valid) {
        errors.push(phoneCheck.message);
      }
    }
    
    // Validate name consistency
    if (customer.firstName && customer.lastName && customer.full_name) {
      const expectedFullName = `${customer.firstName} ${customer.lastName}`;
      if (customer.full_name !== expectedFullName) {
        errors.push('Meno a priezvisko sa nezhoduj√∫ s cel√Ωm menom');
      }
    }
    
    return {
      valid: errors.length === 0,
      errors: errors,
      message: errors.length === 0 
        ? '√ödaje z√°kazn√≠ka s√∫ platn√©' 
        : `Pre rezerv√°ciu potrebujem: ${errors.join(', ')}`
    };
  }
  
  validateBookingRequest(request) {
    const errors = [];
    
    // Date validation
    if (!request.date) {
      errors.push('D√°tum je povinn√Ω');
    } else if (!this.isValidDateFormat(request.date)) {
      errors.push('Neplatn√Ω form√°t d√°tumu. Pou≈æite DD.MM.YYYY');
    } else if (this.isDateInPast(request.date)) {
      errors.push('Nem√¥≈æem rezervova≈• term√≠n v minulosti');
    }
    
    // Time validation  
    if (!request.time) {
      errors.push('ƒåas je povinn√Ω');
    } else if (!this.isValidTimeFormat(request.time)) {
      errors.push('Neplatn√Ω form√°t ƒçasu. Pou≈æite HH:MM');
    }
    
    // ISO datetime validation
    if (!request.date_time) {
      errors.push('ISO form√°t d√°tumu a ƒçasu je povinn√Ω pre valid√°ciu');
    }
    
    return {
      valid: errors.length === 0,
      errors: errors,
      message: errors.length === 0 ? 'Po≈æiadavka na rezerv√°ciu je platn√°' : errors.join(', ')
    };
  }
  
  isValidDateFormat(date) {
    return /^\d{1,2}\.\d{1,2}\.\d{4}$/.test(date);
  }
  
  isValidTimeFormat(time) {
    return /^\d{1,2}:\d{2}$/.test(time);
  }
  
  isDateInPast(dateStr) {
    const [day, month, year] = dateStr.split('.');
    const inputDate = new Date(year, month - 1, day);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return inputDate < today;
  }
}

// Demo test cases
const validator = new BookingValidation();

console.log('üì± 1. Phone Number Validation Tests:');
const phoneTests = [
  '+421901234567', // Valid
  '+421123456789', // Valid  
  '0901234567',    // Invalid - missing country code
  '+420901234567', // Invalid - wrong country
  '+42190123456'   // Invalid - too short
];

phoneTests.forEach(phone => {
  const result = validator.validatePhoneNumber(phone);
  console.log(`   ${phone}: ${result.valid ? '‚úÖ' : '‚ùå'} ${result.message}`);
});

console.log('\nüë§ 2. Customer Data Validation Tests:');
const customerTests = [
  {
    name: 'Valid Customer',
    data: {
      firstName: 'M√°ria',
      lastName: 'Nov√°k',
      full_name: 'M√°ria Nov√°k',
      phone: '+421901234567',
      email: 'maria@example.sk'
    }
  },
  {
    name: 'Missing Phone',
    data: {
      firstName: 'J√°n',
      lastName: 'Kov√°ƒç',
      email: 'jan@example.sk'
    }
  },
  {
    name: 'Invalid Phone Format',
    data: {
      firstName: 'Peter',
      lastName: 'Nov√°k',
      phone: '0901234567', // Missing country code
      email: 'peter@example.sk'
    }
  },
  {
    name: 'Name Mismatch',
    data: {
      firstName: 'Anna',
      lastName: 'Kvetkov√°',
      full_name: 'Anna Nov√°kova', // Doesn't match
      phone: '+421901234567',
      email: 'anna@example.sk'
    }
  }
];

customerTests.forEach(test => {
  const result = validator.validateCustomerData(test.data);
  console.log(`   ${test.name}: ${result.valid ? '‚úÖ' : '‚ùå'} ${result.message}`);
});

console.log('\nüìÖ 3. Booking Request Validation Tests:');
const bookingTests = [
  {
    name: 'Valid Booking Request',
    data: {
      action: 'book_appointment',
      date: '25.12.2025',
      time: '14:30',
      date_time: '2025-12-25T14:30:00',
      phone: '+421901234567',
      customer: {
        firstName: 'M√°ria',
        lastName: 'Nov√°k',
        phone: '+421901234567'
      }
    }
  },
  {
    name: 'Past Date Request',
    data: {
      action: 'book_appointment', 
      date: '15.08.2023', // Past date
      time: '14:30',
      date_time: '2023-08-15T14:30:00',
      phone: '+421901234567'
    }
  },
  {
    name: 'Invalid Date Format',
    data: {
      action: 'book_appointment',
      date: '2025-12-25', // Wrong format
      time: '14:30',
      phone: '+421901234567'
    }
  },
  {
    name: 'Missing Required Fields',
    data: {
      action: 'book_appointment'
      // Missing date, time, phone
    }
  }
];

bookingTests.forEach(test => {
  const result = validator.validateBookingRequest(test.data);
  console.log(`   ${test.name}: ${result.valid ? '‚úÖ' : '‚ùå'} ${result.message}`);
});

console.log('\nüîÑ 4. Enhanced Action Types Available:');
const enhancedActions = [
  'get_available_times',
  'get_soonest_available', 
  'get_more_slots',
  'book_appointment',
  'reschedule_appointment',
  'cancel_appointment'
];

enhancedActions.forEach(action => {
  console.log(`   ‚úÖ ${action}`);
});

console.log('\nüìä 5. Validation Response Examples:');

// Example validation responses
const validationResponses = {
  phone_invalid: "Pros√≠m, zadajte platn√© slovensk√© telef√≥nne ƒç√≠slo (+421XXXXXXXXX).",
  name_mismatch: "Meno a priezvisko sa nezhoduj√∫. Pros√≠m, skontrolujte √∫daje.",
  missing_required: "Pre rezerv√°ciu potrebujem: firstName, lastName, phone.",
  appointment_conflict: "Na tento ƒças u≈æ m√°te rezervovan√Ω term√≠n. Pon√∫knem alternat√≠vu.",
  date_invalid: "D√°tum mus√≠ by≈• v bud√∫cnosti. Pros√≠m, vyberte in√Ω d√°tum.",
  verification_needed: "Pre dokonƒçenie rezerv√°cie potrebujem va≈°e telef√≥nne ƒç√≠slo.",
  data_confirmation: "Skontrolujme √∫daje: M√°ria Nov√°k, telef√≥n +421901234567, term√≠n 25.12.2025 o 14:30. S√∫hlas√≠te?",
  slot_double_check: "Overujem dostupnos≈• term√≠nu pred rezerv√°ciou..."
};

Object.entries(validationResponses).forEach(([key, response]) => {
  console.log(`   ${key}: "${response}"`);
});

console.log('\n‚úÖ Enhanced Booking Validation Demo Complete!');
console.log('');
console.log('üéØ Key Features Implemented:');
console.log('   ‚Ä¢ Slovak phone number validation (+421XXXXXXXXX)');
console.log('   ‚Ä¢ Required field validation (firstName, lastName, phone)');
console.log('   ‚Ä¢ Name consistency checking');
console.log('   ‚Ä¢ Date/time format validation');
console.log('   ‚Ä¢ Past date prevention'); 
console.log('   ‚Ä¢ ISO datetime requirement for validation');
console.log('   ‚Ä¢ Enhanced error messages in Slovak');
console.log('   ‚Ä¢ Customer verification process');
console.log('   ‚Ä¢ Booking integrity checks');
console.log('');
console.log('üí° This validation logic minimizes booking hassles by:');
console.log('   ‚Ä¢ Catching errors before API calls');
console.log('   ‚Ä¢ Providing clear, actionable error messages');
console.log('   ‚Ä¢ Preventing common booking mistakes');
console.log('   ‚Ä¢ Ensuring data consistency across all operations');
console.log('   ‚Ä¢ Supporting multiple validation layers');